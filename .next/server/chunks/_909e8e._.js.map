{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/seed/route.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport { db } from '@vercel/postgres';\nimport { invoices, customers, revenue, users } from '../lib/placeholder-data';\n\nconst client = await db.connect();\n\nasync function seedUsers() {\n  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n  await client.sql`\n    CREATE TABLE IF NOT EXISTS users (\n      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n      name VARCHAR(255) NOT NULL,\n      email TEXT NOT NULL UNIQUE,\n      password TEXT NOT NULL\n    );\n  `;\n\n  const insertedUsers = await Promise.all(\n    users.map(async (user) => {\n      const hashedPassword = await bcrypt.hash(user.password, 10);\n      return client.sql`\n        INSERT INTO users (id, name, email, password)\n        VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\n        ON CONFLICT (id) DO NOTHING;\n      `;\n    }),\n  );\n\n  return insertedUsers;\n}\n\nasync function seedInvoices() {\n  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n  await client.sql`\n    CREATE TABLE IF NOT EXISTS invoices (\n      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n      customer_id UUID NOT NULL,\n      amount INT NOT NULL,\n      status VARCHAR(255) NOT NULL,\n      date DATE NOT NULL\n    );\n  `;\n\n  const insertedInvoices = await Promise.all(\n    invoices.map(\n      (invoice) => client.sql`\n        INSERT INTO invoices (customer_id, amount, status, date)\n        VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\n        ON CONFLICT (id) DO NOTHING;\n      `,\n    ),\n  );\n\n  return insertedInvoices;\n}\n\nasync function seedCustomers() {\n  await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n  await client.sql`\n    CREATE TABLE IF NOT EXISTS customers (\n      id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n      name VARCHAR(255) NOT NULL,\n      email VARCHAR(255) NOT NULL,\n      image_url VARCHAR(255) NOT NULL\n    );\n  `;\n\n  const insertedCustomers = await Promise.all(\n    customers.map(\n      (customer) => client.sql`\n        INSERT INTO customers (id, name, email, image_url)\n        VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\n        ON CONFLICT (id) DO NOTHING;\n      `,\n    ),\n  );\n\n  return insertedCustomers;\n}\n\nasync function seedRevenue() {\n  await client.sql`\n    CREATE TABLE IF NOT EXISTS revenue (\n      month VARCHAR(4) NOT NULL UNIQUE,\n      revenue INT NOT NULL\n    );\n  `;\n\n  const insertedRevenue = await Promise.all(\n    revenue.map(\n      (rev) => client.sql`\n        INSERT INTO revenue (month, revenue)\n        VALUES (${rev.month}, ${rev.revenue})\n        ON CONFLICT (month) DO NOTHING;\n      `,\n    ),\n  );\n\n  return insertedRevenue;\n}\n\nexport async function GET() {\n  // return Response.json({\n  //   message:\n  //     'Uncomment this file and remove this line. You can delete this file when you are finished.',\n  // });\n  try {\n    await client.sql`BEGIN`;\n    await seedUsers();\n    await seedCustomers();\n    await seedInvoices();\n    await seedRevenue();\n    await client.sql`COMMIT`;\n\n    return Response.json({ message: 'Database seeded successfully' });\n  } catch (error) {\n    await client.sql`ROLLBACK`;\n    return Response.json({ error }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AADA;;;;AAGA,MAAM,SAAS,MAAM,qPAAA,CAAA,KAAE,CAAC,OAAO;AAE/B,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAC5D,MAAM,OAAO,GAAG,CAAC;;;;;;;EAOjB,CAAC;IAED,MAAM,gBAAgB,MAAM,QAAQ,GAAG,CACrC,mIAAA,CAAA,QAAK,CAAC,GAAG,CAAC,OAAO;QACf,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;QACxD,OAAO,OAAO,GAAG,CAAC;;gBAER,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,eAAe;;MAEpE,CAAC;IACH;IAGF,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;;EAQjB,CAAC;IAED,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CACxC,mIAAA,CAAA,WAAQ,CAAC,GAAG,CACV,CAAC,UAAY,OAAO,GAAG,CAAC;;gBAEd,EAAE,QAAQ,WAAW,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,MAAM,CAAC,EAAE,EAAE,QAAQ,IAAI,CAAC;;MAEvF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC,0CAA0C,CAAC;IAE5D,MAAM,OAAO,GAAG,CAAC;;;;;;;EAOjB,CAAC;IAED,MAAM,oBAAoB,MAAM,QAAQ,GAAG,CACzC,mIAAA,CAAA,YAAS,CAAC,GAAG,CACX,CAAC,WAAa,OAAO,GAAG,CAAC;;gBAEf,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC,EAAE,EAAE,SAAS,KAAK,CAAC,EAAE,EAAE,SAAS,SAAS,CAAC;;MAEpF,CAAC;IAIL,OAAO;AACT;AAEA,eAAe;IACb,MAAM,OAAO,GAAG,CAAC;;;;;EAKjB,CAAC;IAED,MAAM,kBAAkB,MAAM,QAAQ,GAAG,CACvC,mIAAA,CAAA,UAAO,CAAC,GAAG,CACT,CAAC,MAAQ,OAAO,GAAG,CAAC;;gBAEV,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE,IAAI,OAAO,CAAC;;MAEtC,CAAC;IAIL,OAAO;AACT;AAEO,eAAe;IACpB,yBAAyB;IACzB,aAAa;IACb,mGAAmG;IACnG,MAAM;IACN,IAAI;QACF,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC;QACvB,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;QAExB,OAAO,SAAS,IAAI,CAAC;YAAE,SAAS;QAA+B;IACjE,EAAE,OAAO,OAAO;QACd,MAAM,OAAO,GAAG,CAAC,QAAQ,CAAC;QAC1B,OAAO,SAAS,IAAI,CAAC;YAAE;QAAM,GAAG;YAAE,QAAQ;QAAI;IAChD;AACF"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/node_modules/.pnpm/next%4015.1.0_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,6UAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,4SAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,mTAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}