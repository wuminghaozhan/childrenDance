{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/ui/invoices/edit-form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/edit-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/edit-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oYAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/ui/invoices/edit-form.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/edit-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/edit-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oYAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\n\ninterface Breadcrumb {\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\nexport default function Breadcrumbs({\n  breadcrumbs,\n}: {\n  breadcrumbs: Breadcrumb[];\n}) {\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\n      <ol className={clsx(lusitana.className, 'flex text-xl md:text-2xl')}>\n        {breadcrumbs.map((breadcrumb, index) => (\n          <li\n            key={breadcrumb.href}\n            aria-current={breadcrumb.active}\n            className={clsx(\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\n            )}\n          >\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\n            {index < breadcrumbs.length - 1 ? (\n              <span className=\"mx-3 inline-block\">/</span>\n            ) : null}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,6XAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,6XAAC;YAAG,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,6XAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,6XAAC,2SAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,6XAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH"}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/lib/data.ts"],"sourcesContent":["\"use server\";\n// import { sql } from '@vercel/postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\n\nimport { neon } from \"@neondatabase/serverless\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not defined');\n}\nconst sql = neon(process.env.DATABASE_URL);\n\nexport async function fetchRevenue() {\n  try {\n    // Artificially delay a response for demo purposes.\n    // Don't do this in production :)\n    \n    const data = await sql`SELECT * FROM revenue`;\n\n    // console.log('Data fetch completed after 3 seconds.', data);\n\n    return data;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch revenue data.');\n  }\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    const data = await sql<LatestInvoiceRaw>`\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      ORDER BY invoices.date DESC\n      LIMIT 5`;\n      console.log('-------.', data);\n    const latestInvoices = data.map((invoice) => ({\n      ...invoice,\n      amount: formatCurrency(invoice.amount),\n    }));\n    return latestInvoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch the latest invoices.');\n  }\n}\n\nexport async function fetchCardData() {\n  try {\n    // You can probably combine these into a single SQL query\n    // However, we are intentionally splitting them to demonstrate\n    // how to initialize multiple queries in parallel with JS.\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n    const invoiceStatusPromise = sql`SELECT\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n         FROM invoices`;\n\n    const data = await Promise.all([\n      invoiceCountPromise,\n      customerCountPromise,\n      invoiceStatusPromise,\n    ]);\n\n    const numberOfInvoices = Number(data[0][0].count ?? '0');\n    const numberOfCustomers = Number(data[1][0].count ?? '0');\n    const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n    const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n    return {\n      numberOfCustomers,\n      numberOfInvoices,\n      totalPaidInvoices,\n      totalPendingInvoices,\n    };\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch card data.');\n  }\n}\n\nconst ITEMS_PER_PAGE = 6;\nexport async function fetchFilteredInvoices(\n  query: string,\n  currentPage: number,\n) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n  try {\n    const invoices = await sql<InvoicesTable>`\n      SELECT\n        invoices.id,\n        invoices.amount,\n        invoices.date,\n        invoices.status,\n        customers.name,\n        customers.email,\n        customers.image_url\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      WHERE\n        customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`} OR\n        invoices.amount::text ILIKE ${`%${query}%`} OR\n        invoices.date::text ILIKE ${`%${query}%`} OR\n        invoices.status ILIKE ${`%${query}%`}\n      ORDER BY invoices.date DESC\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n    `;\n\n    return invoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n    const count = await sql`SELECT COUNT(*)\n    FROM invoices\n    JOIN customers ON invoices.customer_id = customers.id\n    WHERE\n      customers.name ILIKE ${`%${query}%`} OR\n      customers.email ILIKE ${`%${query}%`} OR\n      invoices.amount::text ILIKE ${`%${query}%`} OR\n      invoices.date::text ILIKE ${`%${query}%`} OR\n      invoices.status ILIKE ${`%${query}%`}\n  `;\n\n    const totalPages = Math.ceil(Number(count[0].count) / ITEMS_PER_PAGE);\n    return totalPages;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await sql<InvoiceForm>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const data = await sql<CustomerField>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    const customers = data;\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await sql<CustomersTableType>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.rows.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/dashboard/invoices/%5Bid%5D/edit/page.tsx"],"sourcesContent":["import Form from '@/app/ui/invoices/edit-form';\nimport Breadcrumbs from '@/app/ui/invoices/breadcrumbs';\nimport { fetchInvoiceById, fetchCustomers } from '@/app/lib/data';\nimport { notFound } from 'next/navigation';\n \nexport default async function Page(props: { params: Promise<{ id: string }> }) {\n    const params = await props.params;\n    const id = params.id;\n  const [invoice, customers] = await Promise.all([\n    fetchInvoiceById(id),\n    fetchCustomers(),\n  ]);\n  if (!invoice) {\n    notFound();\n  }\n  return (\n    <main>\n      <Breadcrumbs\n        breadcrumbs={[\n          { label: 'Invoices', href: '/dashboard/invoices' },\n          {\n            label: 'Edit Invoice',\n            href: `/dashboard/invoices/${id}/edit`,\n            active: true,\n          },\n        ]}\n      />\n      <Form invoice={invoice} customers={customers} />\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;AAEe,eAAe,KAAK,KAA0C;IACzE,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,KAAK,OAAO,EAAE;IACtB,MAAM,CAAC,SAAS,UAAU,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC7C,CAAA,GAAA,kHAAA,CAAA,mBAAgB,AAAD,EAAE;QACjB,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD;KACd;IACD,IAAI,CAAC,SAAS;QACZ,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD;IACT;IACA,qBACE,6XAAC;;0BACC,6XAAC,qIAAA,CAAA,UAAW;gBACV,aAAa;oBACX;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBACE,OAAO;wBACP,MAAM,CAAC,oBAAoB,EAAE,GAAG,KAAK,CAAC;wBACtC,QAAQ;oBACV;iBACD;;;;;;0BAEH,6XAAC,sIAAA,CAAA,UAAI;gBAAC,SAAS;gBAAS,WAAW;;;;;;;;;;;;AAGzC"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n \nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');\n      if (isOnDashboard) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      } else if (isLoggedIn) {\n        return Response.redirect(new URL('/dashboard', nextUrl));\n      }\n      return true;\n    },\n  },\n  providers: [], // Add providers with an empty array for now\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAClD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW,EAAE;AACf"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 656, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport { authConfig } from './auth.config';\nimport Credentials from 'next-auth/providers/credentials';\nimport { z } from 'zod';\nimport { sql } from '@vercel/postgres';\nimport type { User } from '@/app/lib/definitions';\nimport bcrypt from 'bcrypt';\n \nasync function getUser(email: string): Promise<User | undefined> {\n  try {\n    const user = await sql<User>`SELECT * FROM users WHERE email=${email}`;\n    return user.rows[0];\n  } catch (error) {\n    console.error('Failed to fetch user:', error);\n    throw new Error('Failed to fetch user.');\n  }\n}\n \nexport const { auth, signIn, signOut } = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n        async authorize(credentials) {\n            const parsedCredentials = z\n                .object({ email: z.string().email(), password: z.string().min(6) })\n                .safeParse(credentials);\n\n            if (parsedCredentials.success) {\n                const { email, password } = parsedCredentials.data;\n                const user = await getUser(email);\n                if (!user) return null;\n\n                const passwordsMatch = await bcrypt.compare(password, user.password);\n                if (passwordsMatch) return user;\n            }\n            console.log('Invalid credentials');\n            return null;\n        },\n      }),\n  ],\n});"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;AAEA;AANA;AAEA;AACA;AACA;;;;;;;AAIA,eAAe,QAAQ,KAAa;IAClC,IAAI;QACF,MAAM,OAAO,MAAM,mPAAA,CAAA,MAAG,AAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC;QACtE,OAAO,KAAK,IAAI,CAAC,EAAE;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,wWAAA,CAAA,UAAQ,AAAD,EAAE;IAChD,GAAG,8GAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE;YACR,MAAM,WAAU,WAAW;gBACvB,MAAM,oBAAoB,qLAAA,CAAA,IAAC,CACtB,MAAM,CAAC;oBAAE,OAAO,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;oBAAI,UAAU,qLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAG,GAChE,SAAS,CAAC;gBAEf,IAAI,kBAAkB,OAAO,EAAE;oBAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,kBAAkB,IAAI;oBAClD,MAAM,OAAO,MAAM,QAAQ;oBAC3B,IAAI,CAAC,MAAM,OAAO;oBAElB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBACnE,IAAI,gBAAgB,OAAO;gBAC/B;gBACA,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;QACF;KACH;AACH"}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { neon } from \"@neondatabase/serverless\";\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport { signIn } from '@/auth';\nimport { AuthError } from 'next-auth';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not defined');\n}\nconst sql = neon(process.env.DATABASE_URL);\n \nconst FormSchema = z.object({\n    id: z.string(),\n    customerId: z.string({\n      invalid_type_error: 'Please select a customer.',\n    }),\n    amount: z.coerce\n      .number()\n      .gt(0, { message: 'Please enter an amount greater than $0.' }),\n    status: z.enum(['pending', 'paid'], {\n      invalid_type_error: 'Please select an invoice status.',\n    }),\n    date: z.string(),\n  });\n \nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport type State = {\n    errors?: {\n      customerId?: string[];\n      amount?: string[];\n      status?: string[];\n    };\n    message?: string | null;\n  };\n \nexport async function createInvoice(prevState: State, formData: FormData) {\n    const validatedFields = CreateInvoice.safeParse({\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Missing Fields. Failed to Create Invoice.',\n        };\n      }\n   \n    // Prepare data for insertion into the database\n    const { customerId, amount, status } = validatedFields.data;\n    const amountInCents = amount * 100;\n    const date = new Date().toISOString().split('T')[0];\n   \n    try {\n      await sql`\n        INSERT INTO invoices (customer_id, amount, status, date)\n        VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n      `;\n    } catch (error) {\n      return {\n        error,\n        message: 'Database Error: Failed to Create Invoice.',\n      };\n    }\n   \n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices');\n  }\n  \n  export async function updateInvoice(id: string, prevState: State, formData: FormData) {\n    const validatedFields = UpdateInvoice.safeParse({\n        customerId: formData.get('customerId'),\n        amount: formData.get('amount'),\n        status: formData.get('status'),\n      });\n      if (!validatedFields.success) {\n        return {\n          errors: validatedFields.error.flatten().fieldErrors,\n          message: 'Missing Fields. Failed to Update Invoice.',\n        };\n      }\n   \n      const { customerId, amount, status } = validatedFields.data;\n      const amountInCents = amount * 100;\n   \n    try {\n      await sql`\n          UPDATE invoices\n          SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n          WHERE id = ${id}\n        `;\n    } catch (error) {\n      return {error, message: 'Database Error: Failed to Update Invoice.' };\n    }\n   \n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices');\n  }\n\n  export async function deleteInvoice(id: string) {\n    try {\n      await sql`DELETE FROM invoices WHERE id = ${id}`;\n      revalidatePath('/dashboard/invoices');\n      return { message: 'Deleted Invoice.' };\n    } catch (error) {\n      return {error, message: 'Database Error: Failed to Delete Invoice.' };\n    }\n  }\n\n  export async function authenticate(\n    prevState: string | undefined,\n    formData: FormData,\n  ) {\n    try {\n      await signIn('credentials', formData);\n    } catch (error) {\n      if (error instanceof AuthError) {\n        switch (error.type) {\n          case 'CredentialsSignin':\n            return 'Invalid credentials.';\n          default:\n            return 'Something went wrong.';\n        }\n      }\n      throw error;\n    }\n  }"],"names":[],"mappings":"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"}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}