{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/eeo/personal/myNext/childrenDance/app/seed/route.ts"],"sourcesContent":["// import bcrypt from 'bcrypt';\n// import { db } from '@vercel/postgres';\n// import { invoices, customers, revenue, users } from '../lib/placeholder-data';\n\n// const client = await db.connect();\n\n// async function seedUsers() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS users (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email TEXT NOT NULL UNIQUE,\n//       password TEXT NOT NULL\n//     );\n//   `;\n\n//   const insertedUsers = await Promise.all(\n//     users.map(async (user) => {\n//       const hashedPassword = await bcrypt.hash(user.password, 10);\n//       return client.sql`\n//         INSERT INTO users (id, name, email, password)\n//         VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})\n//         ON CONFLICT (id) DO NOTHING;\n//       `;\n//     }),\n//   );\n\n//   return insertedUsers;\n// }\n\n// async function seedInvoices() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS invoices (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       customer_id UUID NOT NULL,\n//       amount INT NOT NULL,\n//       status VARCHAR(255) NOT NULL,\n//       date DATE NOT NULL\n//     );\n//   `;\n\n//   const insertedInvoices = await Promise.all(\n//     invoices.map(\n//       (invoice) => client.sql`\n//         INSERT INTO invoices (customer_id, amount, status, date)\n//         VALUES (${invoice.customer_id}, ${invoice.amount}, ${invoice.status}, ${invoice.date})\n//         ON CONFLICT (id) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedInvoices;\n// }\n\n// async function seedCustomers() {\n//   await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS customers (\n//       id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,\n//       name VARCHAR(255) NOT NULL,\n//       email VARCHAR(255) NOT NULL,\n//       image_url VARCHAR(255) NOT NULL\n//     );\n//   `;\n\n//   const insertedCustomers = await Promise.all(\n//     customers.map(\n//       (customer) => client.sql`\n//         INSERT INTO customers (id, name, email, image_url)\n//         VALUES (${customer.id}, ${customer.name}, ${customer.email}, ${customer.image_url})\n//         ON CONFLICT (id) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedCustomers;\n// }\n\n// async function seedRevenue() {\n//   await client.sql`\n//     CREATE TABLE IF NOT EXISTS revenue (\n//       month VARCHAR(4) NOT NULL UNIQUE,\n//       revenue INT NOT NULL\n//     );\n//   `;\n\n//   const insertedRevenue = await Promise.all(\n//     revenue.map(\n//       (rev) => client.sql`\n//         INSERT INTO revenue (month, revenue)\n//         VALUES (${rev.month}, ${rev.revenue})\n//         ON CONFLICT (month) DO NOTHING;\n//       `,\n//     ),\n//   );\n\n//   return insertedRevenue;\n// }\n\nexport async function GET() {\n  return Response.json({\n    message:\n      'Uncomment this file and remove this line. You can delete this file when you are finished.',\n  });\n  // try {\n  //   await client.sql`BEGIN`;\n  //   await seedUsers();\n  //   await seedCustomers();\n  //   await seedInvoices();\n  //   await seedRevenue();\n  //   await client.sql`COMMIT`;\n\n  //   return Response.json({ message: 'Database seeded successfully' });\n  // } catch (error) {\n  //   await client.sql`ROLLBACK`;\n  //   return Response.json({ error }, { status: 500 });\n  // }\n}\n"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,yCAAyC;AACzC,iFAAiF;AAEjF,qCAAqC;AAErC,+BAA+B;AAC/B,kEAAkE;AAClE,sBAAsB;AACtB,yCAAyC;AACzC,wDAAwD;AACxD,oCAAoC;AACpC,oCAAoC;AACpC,+BAA+B;AAC/B,SAAS;AACT,OAAO;AAEP,6CAA6C;AAC7C,kCAAkC;AAClC,qEAAqE;AACrE,2BAA2B;AAC3B,wDAAwD;AACxD,8EAA8E;AAC9E,uCAAuC;AACvC,WAAW;AACX,UAAU;AACV,OAAO;AAEP,0BAA0B;AAC1B,IAAI;AAEJ,kCAAkC;AAClC,kEAAkE;AAElE,sBAAsB;AACtB,4CAA4C;AAC5C,wDAAwD;AACxD,mCAAmC;AACnC,6BAA6B;AAC7B,sCAAsC;AACtC,2BAA2B;AAC3B,SAAS;AACT,OAAO;AAEP,gDAAgD;AAChD,oBAAoB;AACpB,iCAAiC;AACjC,mEAAmE;AACnE,iGAAiG;AACjG,uCAAuC;AACvC,WAAW;AACX,SAAS;AACT,OAAO;AAEP,6BAA6B;AAC7B,IAAI;AAEJ,mCAAmC;AACnC,kEAAkE;AAElE,sBAAsB;AACtB,6CAA6C;AAC7C,wDAAwD;AACxD,oCAAoC;AACpC,qCAAqC;AACrC,wCAAwC;AACxC,SAAS;AACT,OAAO;AAEP,iDAAiD;AACjD,qBAAqB;AACrB,kCAAkC;AAClC,6DAA6D;AAC7D,8FAA8F;AAC9F,uCAAuC;AACvC,WAAW;AACX,SAAS;AACT,OAAO;AAEP,8BAA8B;AAC9B,IAAI;AAEJ,iCAAiC;AACjC,sBAAsB;AACtB,2CAA2C;AAC3C,0CAA0C;AAC1C,6BAA6B;AAC7B,SAAS;AACT,OAAO;AAEP,+CAA+C;AAC/C,mBAAmB;AACnB,6BAA6B;AAC7B,+CAA+C;AAC/C,gDAAgD;AAChD,0CAA0C;AAC1C,WAAW;AACX,SAAS;AACT,OAAO;AAEP,4BAA4B;AAC5B,IAAI;;;;AAEG,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QACnB,SACE;IACJ;AACA,QAAQ;AACR,6BAA6B;AAC7B,uBAAuB;AACvB,2BAA2B;AAC3B,0BAA0B;AAC1B,yBAAyB;AACzB,8BAA8B;AAE9B,uEAAuE;AACvE,oBAAoB;AACpB,gCAAgC;AAChC,sDAAsD;AACtD,IAAI;AACN"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}